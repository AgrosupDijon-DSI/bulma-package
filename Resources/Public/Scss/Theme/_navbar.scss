$navbar-item-weight: $weight-semibold !default;
$navbar-item-size: $body-font-size !default;
$navbar-dropdown-box-shadow: 0 8px 8px bulmaRgba($scheme-invert, 0.1) !default;
$navbar-dropdown-border-bottom: 0 !default;
$navbar-dropdown-border-top-color: $primary !default;

.navbar-item {
  &:empty {
    padding: 0;
  }
}

.navbar-burger {
  align-self: center;
}

.navbar-start, .navbar-end {
  & > a, & > .navbar-item > a {
    font-weight: $navbar-item-weight;
    font-size: $navbar-item-size;
  }
}

.nested.has-dropdown {
  padding: 0;

  & > .navbar-link {
    width: 100%;

    &:not(.is-arrowless) {
      padding-right: 2.5em;
    }
  }
}

@include until($navbar-breakpoint) {
  .navbar-menu {
    display: block;
    position: absolute;
    width: 100%;
    border-top: $navbar-dropdown-border-top;
    border-color: $primary;
    box-shadow: none;
    padding: 0;
    border-bottom: $navbar-dropdown-border-bottom;

    .navbar-start, .navbar-end {
      & > .navbar-item {
        border-bottom: $navbar-dropdown-border-top;
        border-color: $primary;
      }
    }

    transform: translateX(100%);
    -webkit-transform: translateX(100%);
    transition: 0.5s ease-in-out transform;

    &.is-active {
      transform: translateX(0);
      -webkit-transform: translateX(0);
    }

    .navbar-link:not(.is-arrowless):after {
      border: 0;
    }
  }

  .navbar-dropdown {
    padding: 0;
  }

  .nested.has-dropdown {

    .navbar-link {
      padding-left: 1.5rem;
    }

    .navbar-dropdown {
      margin-left: 1.5rem;
      border-left: 1px solid $primary;
    }
  }
  .navbar > .container {
    padding: 0;
  }
}

@include from($navbar-breakpoint) {
  // Separated from next block to fix edge not displaying .navbar-dropdown on hover
  .navbar-item {
    &.is-hoverable:focus-within {
      .navbar-dropdown {
        display: none;
      }

      & > .navbar-dropdown {
        display: block;
      }
    }
  }

  // Fix hover state for nested dropdown
  .navbar-item.has-dropdown {
    &:focus,
    &:hover,
    &.is-active {
      .navbar-link {
        background-color: transparent;
      }

      & > .navbar-link {
        background-color: $navbar-item-hover-background-color;
      }
    }
  }

  // Fix hover state for "colored" nested dropdown
  @each $name, $pair in $navbar-colors {
    $color: nth($pair, 1);
    $color-invert: nth($pair, 2);

    .navbar.is-#{$name} {
      .navbar-start,
      .navbar-end{
        & > a.navbar-item,
        .navbar-link {
          &:focus,
          &:hover,
          &.is-active {
            background-color: bulmaDarken($color, 5%);
            @if variable-exists(navbar-with-background-item-hover-background-color) {
              background-color: $navbar-with-background-item-hover-background-color;
            }
            @if variable-exists(navbar-with-background-item-hover-color) {
              color: $navbar-with-background-item-hover-color;
            }
          }
        }

        .navbar-link {
          &::after {
            border-color: currentColor;
            @if variable-exists(navbar-with-background-dropdown-arrow) {
              border-color: $navbar-with-background-dropdown-arrow;
            }
          }
        }
      }

      .navbar-item.has-dropdown:focus,
      .navbar-item.has-dropdown:hover,
      .navbar-item.has-dropdown.is-active {
        .navbar-link{
          background-color: transparent;
          color: unset;
        }
        &:not(.nested) > .navbar-link{
          background-color: bulmaDarken($color, 5%);
          @if variable-exists(navbar-with-background-item-hover-background-color) {
            background-color: $navbar-with-background-item-hover-background-color;
          }
          color: $color-invert;
          @if variable-exists(navbar-with-background-item-hover-color) {
            color: $navbar-with-background-item-hover-color;
          }
        }

        .nested{
          .navbar-link{
            &:hover,
            &:focus,
            &.is-active{
              background-color: $navbar-dropdown-item-hover-background-color;
              color: $navbar-dropdown-item-hover-color;
            }
          }
        }
      }
    }
  }

  .navbar-item {
    &.is-active,
    &.is-hoverable:focus,
    &.is-hoverable:hover {
      .navbar-dropdown {
        display: none;
      }

      & > .navbar-dropdown {
        display: block;
      }
    }
  }

  .navbar-dropdown {
    border-top-color: $navbar-dropdown-border-top-color;
    box-shadow: $navbar-dropdown-box-shadow;
    border-bottom: $navbar-dropdown-border-bottom;
    .navbar-item {
      & > .navbar-link{
        padding: 0.375rem 1rem;
      }
    }

    // Fix hover state for nested dropdown
    .navbar-link{
      &:focus,
      &:hover {
        background-color: $navbar-dropdown-item-hover-background-color;
        color: $navbar-dropdown-item-hover-color;
      }

      &.is-active {
        background-color: $navbar-dropdown-item-active-background-color;
        color: $navbar-dropdown-item-active-color;
      }
    }
  }
  .nested.has-dropdown {
    & > .navbar-link {
      &:not(.is-arrowless) {
        &:after {
          transform: rotate(-135deg);
        }
      }
    }

    .navbar-dropdown {
      top: -10px;
      margin-left: 100%;
      border-bottom-left-radius: 0;
      border-top-right-radius: 6px;
      box-shadow: 0 4px 10px rgba(10, 10, 10, 0.1);
      border-top: 0;
      border-left: 2px solid $primary;
    }
  }
}
